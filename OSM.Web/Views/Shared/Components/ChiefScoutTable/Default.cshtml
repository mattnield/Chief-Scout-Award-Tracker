@model ChiefScoutViewModel

@{
    ViewBag.Title = "Chief Scout Award";
    var badgeName = string.Empty;
    var moduleName = string.Empty;
    var highlight = false;
}


<style>
    
.rotated-th {
    height: 10rem ;
    position: relative ;
    padding: 0 10px;
}
.rotated-th__label {
    display:block;
    bottom: 0px ;
    left: 50% ;
    position: absolute ;
    transform: rotate( -90deg ) ;
    transform-origin: center left ;
    white-space: nowrap ;
}
    
.rotated-th__label a {
    text-decoration:  none;
}
    
thead th {
    vertical-align: bottom;
}

td, th {
    border: 1px solid black;
}

th {
    text-align:center;
}

td{
 text-align: center;
}

.rowHighlight {
    background-color: lightcyan;
}

.taskInProgress {
    background-color: lightgray !important;
}    

.taskComplete {
    background-color: lightgreen !important;
}    

.badgeComplete {
    background-color: gold !important;
}
</style>

<details>
    <summary>Key</summary>

    <table>
        <tr>
            <td class="rowHighlight">&nbsp;</td><td>No progress</td>
        </tr>
        <tr>
            <td class="taskInProgress">X</td><td>Task is in progress</td>
        </tr>
        <tr>
            <td class="taskComplete">Y</td><td>Task is complete</td>
        </tr>
        <tr>
            <td class="badgeComplete">C</td><td>Badge is complete</td>
        </tr>
    </table>
</details>
<p>&nbsp;</p>
<table>
    <thead>
    <tr>
        <th>Badge</th>
        <th>Module</th>
        <th>Task</th>
        @foreach (var member in Model.Members)
        {
            <th class="rotated-th">
                <span class="memberName rotated-th__label">
                    <vc:member-link member=@member></vc:member-link>
                </span>
            </th>
        }
    </tr>
    </thead>
    <tbody>
    @foreach (var badge in Model.Badges)
    {
        @foreach (var criteria in badge.Criteria)
        {
            <tr>
                @if (badgeName != badge.Name)
                {
                    badgeName = badge.Name;
                    moduleName = string.Empty;

                    <th rowspan="@badge.Criteria.Count">@badge.Name</th>
                }

                @if (moduleName != criteria.Module)
                {
                    moduleName = criteria.Module;
                    highlight = !highlight;

                    <th rowspan="@(badge.Criteria.Count(c => c.Module == moduleName))">@criteria.Module</th>
                }

                <th class="@(highlight ? "rowHighlight" : string.Empty)">@criteria.Name</th>

                @foreach (var scout in Model.Members)
                {
                    var badgeCompletion = Model.Completion[badge.Id]
                        .FirstOrDefault(bc => bc.ScoutId == scout.Id);
                    var completionRecord = badgeCompletion
                        ?.Achievements
                        .FirstOrDefault(a => a.Key == criteria.Id)
                        .Value ?? string.Empty;

                    var completed = !string.IsNullOrEmpty(completionRecord) && !completionRecord.StartsWith('x');
                    var started = !string.IsNullOrEmpty(completionRecord);
                    var inProgress = completionRecord.StartsWith('x');


                    var styles = new List<string>();
                    var text = string.Empty;

                    if (highlight) styles.Add("rowHighlight");

                    if (badgeCompletion!.Completed && started) styles.Add("badgeComplete");
                    if (completed)
                    {
                        text = badgeCompletion.Completed ? "C" : "Y";
                        styles.Add("taskComplete");
                    }

                    if (inProgress)
                    {
                        text = "X";
                        styles.Add("taskInProgress");
                    }

                    <td class="@(string.Join(' ', styles))" title="@Html.Encode(completionRecord)">@text</td>
                }
            </tr>
        }
    }
    </tbody>
</table>